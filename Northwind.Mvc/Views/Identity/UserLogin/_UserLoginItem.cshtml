@model UserLoginItemModel

@{
    string CSHTML = "_UserLoginItem.cshtml";

    IZProfile profile = DataHelper.GetProfile(typeof(UserLogin));
    // Associations (FK)
    string userText = Model.UserLogin == null ? "" : (Model.UserLogin.UserLookupText ?? "");
}

<div id="Item_UserLogin">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "UserLogin_Item_ControllerAction" })
    @Html.HiddenFor(model => model.MasterEntity, new { id = "UserLogin_Item_MasterEntity" })
    @Html.HiddenFor(model => model.MasterKey, new { id = "UserLogin_Item_MasterKey" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "UserLogin_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "UserLogin_Item_IsSave")

    @{Html.EJ().Tab("Tab_UserLogin")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_UserLogin")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_UserLogin_UserLogin").Text(UserLoginResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CSSClassPanel">
                
                <div id="Group_UserLogin_LoginProvider" class="@profile.EditCSSFor("LoginProvider")">
                    @Html.LabelFor(model => model.UserLogin.LoginProvider, new { @class = profile.EditCSSLabelFor("LoginProvider") })
                    @Html.EditorFor(model => model.UserLogin.LoginProvider, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("LoginProvider"), id = "UserLogin_LoginProvider" } })
                    @* @Html.ValidationMessageFor(model => model.UserLogin.LoginProvider, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>
                
                <div id="Group_UserLogin_ProviderKey" class="@profile.EditCSSFor("ProviderKey")">
                    @Html.LabelFor(model => model.UserLogin.ProviderKey, new { @class = profile.EditCSSLabelFor("ProviderKey") })
                    @Html.EditorFor(model => model.UserLogin.ProviderKey, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("ProviderKey"), id = "UserLogin_ProviderKey" } })
                    @* @Html.ValidationMessageFor(model => model.UserLogin.ProviderKey, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>
                
                <div id="Group_UserLogin_UserId" class="@profile.EditCSSFor("UserLookupText")">
                    @Html.LabelFor(model => model.UserLogin.UserId, new { @class = profile.EditCSSLabelFor("UserId") })
                    @Html.EditorFor(model => model.UserLogin.UserId, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("UserId"), id = "UserLogin_UserId" } })
                    @{
                        Html.RenderAction("Lookup", "User", new
                        {
                            Text = userText,
                            ValueId = "UserLogin_UserId",
                            Required = profile.IsRequiredView("UserId")
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.UserLogin.UserId, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>

            </div>);
        })
        .Render();
    }
</div>

<script>
    zSyncfusionItem("Item_UserLogin");

    $(function () {
        try {
            zSyncfusionItemReady("Item_UserLogin");

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            if (controllerAction != "create" || profile.IsIdentity) {
                $("#Group_UserLogin_LoginProvider").hide();
                $("#Group_UserLogin_ProviderKey").hide();
                $("#Group_UserLogin_UserId").hide();
            }

            // Associations (FK)
            switch (model.MasterEntity) {
                case "User":
                    $("#UserClaim_UserId").val(model.MasterUserId);
                    $("#Group_UserClaim_UserId").hide();
                    break;
            }

            // Collections (PK)

            zOnItemView(model, profile);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });

    function itemActive_Tab_UserLogin(args) {
        zTabDictionaryWrite("UserLogin", args.model.selectedItemIndex);

        try {
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_UserLogin", exception));
        }
    }
</script>
