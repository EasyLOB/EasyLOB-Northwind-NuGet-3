@model LookupModel

@*
    @(Model.ValueId)_LookupButton
    @(Model.ValueId)_LookupText
    @(Model.ValueId)_LookupModal
        @(Model.ValueId)_LookupLabel
        @(Model.ValueId)_LookupGrid
            actionFailure_@(Model.ValueId)_LookupGrid()
            load_@(Model.ValueId)_LookupGrid()
            rowSelected_@(Model.ValueId)_LookupGrid()
*@

@{
    string CSHTML = "_SupplierLookup.cshtml";
    
    IZProfile profile = DataHelper.GetProfile(typeof(Supplier));    
}

<div class="@AppDefaults.CSSClassLookup">
    <span class="input-group-addon z-lookupButton"><img id="@(Model.ValueId)_LookupButton" class="btn z-buttonLookup" /></span>
    @Html.TextBox(Model.ValueId + "_LookupText", Model.Text, new { @class = profile.EditCSSLookupEditor(Model.Required) })
</div>

<div id="@(Model.ValueId)_LookupModal" aria-labelledby="@(Model.ValueId)_LookupLabel" class="modal fade col-md-10" role="dialog" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button aria-label="@PresentationResources.Cancel" class="close" data-dismiss="modal" type="button"><span aria-hidden="true">&times;</span></button>
                <h4 id="@(Model.ValueId)_LookupLabel" class="modal-title">@SupplierResources.EntityPlural</h4>
            </div>
            <div class="modal-body">

                @(Html.EJ().Grid<Supplier>(Model.ValueId + "_LookupGrid")
                    //.Datasource(datasource => datasource
                    //    .Adaptor(AdaptorType.UrlAdaptor)
                    //    .URL(Url.Action("DataSource", "Supplier"))
                    //)
                    .Query(Model.Query)
                    .AllowFiltering()
                    .AllowPaging()
                    .AllowReordering()
                    //.AllowResizeToFit()
                    .AllowResizing()
                    //.AllowScrolling()
                    .AllowSearching()
                    .AllowSorting()
                    .AllowTextWrap()
                    .TextWrapSettings(wrap =>
                    {
                        wrap.WrapMode(WrapMode.Both);
                    })
                    .ClientSideEvents(clientEvent => clientEvent
                        .ActionFailure("actionFailure_" + Model.ValueId + "_LookupGrid")
                        .Load("load_" + Model.ValueId + "_LookupGrid")
                        .RowSelected("rowSelected_" + Model.ValueId + "_LookupGrid")                       
                        .ToolbarClick("toolbarClick_" + Model.ValueId + "_LookupGrid")
                    )
                    .Columns(column =>
                    {
                        column.Field("SupplierId")
                            .AllowEditing(false)
                            .Type("number")
                            .EditType(EditingType.NumericEdit)
                            .Format(SyncfusionPatternResources.GridFormat_Integer)
                            .HeaderText(SupplierResources.PropertySupplierId)
                            .IsIdentity(true)
                            .IsPrimaryKey(true)
                            .TextAlign(TextAlign.Right)
                            .Visible(profile.IsGridVisibleFor("SupplierId"))
                            .Width(profile.GridWidthFor("SupplierId"))
                            .Add();
                        column.Field("CompanyName")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyCompanyName)
                            .Visible(profile.IsGridVisibleFor("CompanyName"))
                            .Width(profile.GridWidthFor("CompanyName"))
                            .Add();
                        column.Field("ContactName")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyContactName)
                            .Visible(profile.IsGridVisibleFor("ContactName"))
                            .Width(profile.GridWidthFor("ContactName"))
                            .Add();
                        column.Field("ContactTitle")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyContactTitle)
                            .Visible(profile.IsGridVisibleFor("ContactTitle"))
                            .Width(profile.GridWidthFor("ContactTitle"))
                            .Add();
                        column.Field("Address")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyAddress)
                            .Visible(profile.IsGridVisibleFor("Address"))
                            .Width(profile.GridWidthFor("Address"))
                            .Add();
                        column.Field("City")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyCity)
                            .Visible(profile.IsGridVisibleFor("City"))
                            .Width(profile.GridWidthFor("City"))
                            .Add();
                        column.Field("Region")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyRegion)
                            .Visible(profile.IsGridVisibleFor("Region"))
                            .Width(profile.GridWidthFor("Region"))
                            .Add();
                        column.Field("PostalCode")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyPostalCode)
                            .Visible(profile.IsGridVisibleFor("PostalCode"))
                            .Width(profile.GridWidthFor("PostalCode"))
                            .Add();
                        column.Field("Country")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyCountry)
                            .Visible(profile.IsGridVisibleFor("Country"))
                            .Width(profile.GridWidthFor("Country"))
                            .Add();
                        column.Field("Phone")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyPhone)
                            .Visible(profile.IsGridVisibleFor("Phone"))
                            .Width(profile.GridWidthFor("Phone"))
                            .Add();
                        column.Field("Fax")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyFax)
                            .Visible(profile.IsGridVisibleFor("Fax"))
                            .Width(profile.GridWidthFor("Fax"))
                            .Add();
                        column.Field("HomePage")
                            .Type("string")
                            .EditType(EditingType.StringEdit)
                            .HeaderText(SupplierResources.PropertyHomePage)
                            .Visible(profile.IsGridVisibleFor("HomePage"))
                            .Width(profile.GridWidthFor("HomePage"))
                            .Add();
                    })
                    //.EnablePersistence()
                    .EnableTouch(false)
                    //.IsResponsive(true)
                    .FilterSettings(filter => filter
                        .EnableCaseSensitivity(false)
                        .FilterType(FilterType.Excel)
                        .MaxFilterChoices(AppDefaults.SyncfusionRecordsForFiltering)
                    )
                    .PageSettings(page => page
                        .PageSize(AppDefaults.SyncfusionRecordsByPage)
                    )
                    .ShowColumnChooser()
                    .ToolbarSettings(toolbar => toolbar
                        .CustomToolbarItems(new List<object>() {
                            new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#" + Model.ValueId + "_LookupGrid_Toolbar", Tooltip = "" }
                        })
                        .ShowToolbar()
                        .ToolbarItems(items =>
                        {
                            items.AddTool(ToolBarItems.Search);
                        })
                    )
                )

                <div class="z-formButtons">
                    @Html.ZImage("Button_Clear", "btn z-buttonClear", PresentationResources.Clear, "clear_" + Model.ValueId + "()")
                    @Html.ZImage("Button_Execute", "btn z-buttonExecute", SupplierResources.EntitySingular, "execute_" + Model.ValueId + "()")
                </div>

            </div>
        </div>
    </div>
</div>

<script type="text/x-jsrender" id="@(Model.ValueId)_LookupGrid_Toolbar">
    <div id="@(Model.ValueId)_LookupGrid_Toolbar_Refresh" class="e-toolbaricons e-icon e-reload" title="@PresentationResources.Refresh"></div>
</script>

<script>
    zSyncfusionLookup("@(Model.ValueId)_LookupModal");

    $(function () {
        try {
            zSyncfusionLookupReady("@(Model.ValueId)_LookupModal");

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));

            $("#@(Model.ValueId)").hide();

            $("#@(Model.ValueId)_LookupButton").click(function () {
                zGridDataSource("@(Model.ValueId)_LookupGrid", "@Url.Action("DataSource", "Supplier")", true);

                $("#@(Model.ValueId)_LookupGrid_Toolbar").removeAttr("data-content");

                $("#@(Model.ValueId)_LookupModal").modal("show");
            });

            $("#@(Model.ValueId)_LookupText").prop("readonly", true);
            $("#@(Model.ValueId)_LookupText").val(model.Text.toLocaleString("@CultureInfo.CurrentCulture.Name"));

            $("#@(Model.ValueId)_LookupModal").modal("hide");

            $("#@(Model.ValueId)_LookupGrid_Toolbar").removeAttr("data-content");

            @*
            var ejGrid = zGrid("@(Model.ValueId)_LookupGrid");
            zOnLookupView(model, profile, ejGrid);
            *@
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });

    function actionFailure_@(Model.ValueId)_LookupGrid(args) {
        try {
            zAlert(args.error.responseText);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionFailure_@(Model.ValueId)_LookupGrid", exception));
        }
    }    

    function clear_@(Model.ValueId)() {
        try {
            $("#@(Model.ValueId)").val("").change();

            $("#@(Model.ValueId)_LookupText").val("").change();

            $("#@(Model.ValueId)_LookupModal").modal("hide");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "clear_@(Model.ValueId)", exception));
        }
    }

    function execute_@(Model.ValueId)() {
        try {
            window.open("@(Url.Action("Index", "Supplier", null, Request.Url.Scheme))");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "execute_@(Model.ValueId)", exception));
        }
    }

    function load_@(Model.ValueId)_LookupGrid(args) {
        try {            
            var culture = "@System.Globalization.CultureInfo.CurrentCulture.Name";
            this.model.locale = culture;

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));
            zOnLookupView(model, profile, "@(Model.ValueId)_LookupGrid");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "load_@(Model.ValueId)_LookupGrid", exception));
        }
    }

    function rowSelected_@(Model.ValueId)_LookupGrid(args) {
        try {
            var data = this.model.currentViewData[args.rowIndex];
    
            $("#@(Model.ValueId)").val(data.SupplierId).change();
    
            $("#@(Model.ValueId)_LookupText").val(data.LookupText).change();

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var culture = "@System.Globalization.CultureInfo.CurrentCulture.Name";
            zLookupElements(data, model.Elements, culture);
    
            $("#@(Model.ValueId)_LookupModal").modal("hide");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "rowSelected_@(Model.ValueId)_LookupGrid", exception));
        }
    }

    function toolbarClick_@(Model.ValueId)_LookupGrid(sender) {
        try {
            var toolbar = $(sender.target);
            var ejGrid = zGrid("@(Model.ValueId)_LookupGrid");

            if (toolbar.prop("id") == "@(Model.ValueId)_LookupGrid_Toolbar_Refresh") {
                ejGrid.refreshContent();
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "toolbarClick_@(Model.ValueId)_LookupGrid", exception));
        }
    }
</script>