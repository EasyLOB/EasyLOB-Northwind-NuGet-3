@model CategoryCollectionModel

@{
    string CSHTML = "_CategoryCollection.cshtml";

    IZProfile profile = DataHelper.GetProfile(typeof(Category));
    // Associations (FK)
    string query = "";
}

<div id="Collection_Category">
    @(Html.EJ().Grid<Category>("Grid_Category")
        //.Datasource(datasource => datasource
        //    .Adaptor(AdaptorType.UrlAdaptor)
        //    .URL(Url.Action("DataSource", "Category"))
        //)
        .Query(query)        
        .AllowFiltering()
        .AllowGrouping()
        .AllowPaging()
        .AllowReordering()
        //.AllowResizeToFit()
        .AllowResizing()
        //.AllowScrolling()
        .AllowSearching()
        .AllowSorting()
        .AllowTextWrap()
        .TextWrapSettings(wrap =>
        {
            wrap.WrapMode(WrapMode.Both);
        })                    
        .ClientSideEvents(clientEvent => clientEvent
            .ActionBegin("actionBegin_Grid_Category")
            .ActionFailure("actionFailure_Grid_Category")
            .Load("load_Grid_Category")
            .ToolbarClick("toolbarClick_Grid_Category")
        )
        .Columns(column =>
        {
            column.Field("CategoryId")
                .AllowEditing(false)
                .Type("number")
                .EditType(EditingType.NumericEdit)
                .Format(SyncfusionPatternResources.GridFormat_Integer)
                .HeaderText(CategoryResources.PropertyCategoryId)
                .IsIdentity(true)
                .IsPrimaryKey(true)
                .TextAlign(TextAlign.Right)
                .Visible(profile.IsGridVisibleFor("CategoryId"))
                .Width(profile.GridWidthFor("CategoryId"))
                .Add();
            column.Field("CategoryName")
                .Type("string")
                .EditType(EditingType.StringEdit)
                .HeaderText(CategoryResources.PropertyCategoryName)
                .Visible(profile.IsGridVisibleFor("CategoryName"))
                .Width(profile.GridWidthFor("CategoryName"))
                .Add();
            column.Field("Description")
                .Type("string")
                .EditType(EditingType.StringEdit)
                .HeaderText(CategoryResources.PropertyDescription)
                .Visible(profile.IsGridVisibleFor("Description"))
                .Width(profile.GridWidthFor("Description"))
                .Add();
            column.Field("Picture")
                .Type("string")
                .EditType(EditingType.StringEdit)
                .HeaderText(CategoryResources.PropertyPicture)
                .Visible(profile.IsGridVisibleFor("Picture"))
                .Width(profile.GridWidthFor("Picture"))
                .Add();
        })
        .EditSettings(edit => edit
            .AllowAdding()
            .AllowDeleting()
            .AllowEditing()
            .AllowEditOnDblClick(false)
        )
        //.EnablePersistence()
        .EnableTouch(false)
        //.IsResponsive(true)
        .FilterSettings(filter => filter
            .EnableCaseSensitivity(false)
            .FilterType(FilterType.Excel)
            .MaxFilterChoices(AppDefaults.SyncfusionRecordsForFiltering)
        )
        //.Mappers(map => map
        //    .ExportToExcelAction(Url.Content("~/Category/ExportToExcel"))
        //    .ExportToPdfAction(Url.Content("~/Category/ExportToPdf"))
        //    .ExportToWordAction(Url.Content("~/Category/ExportToWord"))
        //)
        .PageSettings(page => page
            .PageSize(AppDefaults.SyncfusionRecordsByPage)
        )
        .ShowColumnChooser()
        .ToolbarSettings(toolbar => toolbar
            .CustomToolbarItems(new List<object>() {
                new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Grid_Category_Toolbar", Tooltip = "" }
            })
            .ShowToolbar()
            .ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Search);
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                //items.AddTool(ToolBarItems.ExcelExport);
                //items.AddTool(ToolBarItems.PdfExport);
                //items.AddTool(ToolBarItems.WordExport);
            })
        )
    )
</div>

<script type="text/x-jsrender" id="Grid_Category_Toolbar">
    <div id="Grid_Category_Toolbar_Read" class="e-toolbaricons e-icon e-document" title="@PresentationResources.Read"></div>
    <div id="Grid_Category_Toolbar_Refresh" class="e-toolbaricons e-icon e-reload" title="@PresentationResources.Refresh"></div>
</script>

<script>
    zSyncfusionCollection("Collection_Category");
    
    $(function () {
        try {
            zSyncfusionCollectionReady("Collection_Category");

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));

            zOnCollectionView(model, profile, "@Url.Action("DataSource", "Category")");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }                
    });
    
    function actionBegin_Grid_Category(args) {
        try {
            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
    
            // Associations (FK)
            var url = "";

            var scrud = zOnCollectionViewActionBeginSCRUD(model);
            switch (args.requestType) {
                case "searching":
                    // Search
                    if (scrud.isSearch) {
                        zSearchDictionaryWrite("Category", args.keyValue);
                    }
                    break;
                case "add":
                    // Create
                    if (model.ActivityOperations.IsCreate && scrud.isCreate) {
                        $("#ZAjax").load("@(Url.Action("Create", "Category", null, Request.Url.Scheme))" +
                            (url == "" ? "" : "?") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                    }
                    break;
                case "read":
                    // Read
                    if (model.ActivityOperations.IsRead && scrud.isRead) {
                        var data = args.data;
                        if (!ej.isNullOrUndefined(data)) {
                            $("#ZAjax").load("@(Url.Action("Read", "Category", null, Request.Url.Scheme))?CategoryId=" + String(data.CategoryId) +
                                (url == "" ? "" : "&") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                        }
                    }
                    break;                        
                case "beginedit":
                    // Update
                    if (model.ActivityOperations.IsUpdate && scrud.isUpdate) {
                        var data = this.model.currentViewData[args.rowIndex];
                        if (!ej.isNullOrUndefined(data)) {
                            $("#ZAjax").load("@(Url.Action("Update", "Category", null, Request.Url.Scheme))?CategoryId=" + String(data.CategoryId) +
                                (url == "" ? "" : "&") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                        }
                    }
                    break;
                case "delete":
                    // Delete
                    if (model.ActivityOperations.IsDelete && scrud.isDelete) {
                        var data = args.data;
                        if (!ej.isNullOrUndefined(data)) {
                            $("#ZAjax").load("@(Url.Action("Delete", "Category", null, Request.Url.Scheme))?CategoryId=" + String(data.CategoryId) +
                                (url == "" ? "" : "&") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                        }
                    }
                    break;
            }

            zOnCollectionViewActionBegin(model, args);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionBegin_Grid_Category", exception));
        }            
    }
    
    function actionFailure_Grid_Category(args) {
        try {
            zAlert(args.error.responseText);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionFailure_Grid_Category", exception));
        }
    }    

    function load_Grid_Category(args) {
        try {            
            var culture = "@System.Globalization.CultureInfo.CurrentCulture.Name";
            this.model.locale = culture;
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "load_Grid_Category", exception));
        }
    }

    function toolbarClick_Grid_Category(sender) {
        try {
            var toolbar = $(sender.target);
            var ejGrid = zGrid("Grid_Category");

            if (toolbar.prop("id") == "Grid_Category_Toolbar_Read") {
                var records = ejGrid.getSelectedRecords();
                if (records.length == 1) {
                    var args = { requestType: "read", data: records[0] };
                    actionBegin_Grid_Category(args);
                }
            }
            else if (toolbar.prop("id") == "Grid_Category_Toolbar_Refresh") {
                ejGrid.refreshContent();
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "toolbarClick_Grid_Category", exception));
        }
    }
</script>
