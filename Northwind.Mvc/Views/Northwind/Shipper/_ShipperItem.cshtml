@model ShipperItemModel

@{
    string CSHTML = "_ShipperItem.cshtml";
    
    IZProfile profile = DataHelper.GetProfile(typeof(Shipper));    
    // Associations (FK)
}

<div id="Item_Shipper">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "Shipper_Item_ControllerAction" })
    @Html.HiddenFor(model => model.MasterEntity, new { id = "Shipper_Item_MasterEntity" })
    @Html.HiddenFor(model => model.MasterKey, new { id = "Shipper_Item_MasterKey" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "Shipper_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "Shipper_Item_IsSave")

    @{Html.EJ().Tab("Tab_Shipper")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_Shipper")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_Shipper_Shipper").Text(ShipperResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CSSClassPanel">
                
                <div id="Group_Shipper_ShipperId" class="@profile.EditCSSFor("ShipperId")">
                    @Html.LabelFor(model => model.Shipper.ShipperId, new { @class = profile.EditCSSLabelFor("ShipperId") })
                    @Html.EditorFor(model => model.Shipper.ShipperId, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("ShipperId"), id = "Shipper_ShipperId" } })
                    @* @Html.ValidationMessageFor(model => model.Shipper.ShipperId, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>
                
                <div id="Group_Shipper_CompanyName" class="@profile.EditCSSFor("CompanyName")">
                    @Html.LabelFor(model => model.Shipper.CompanyName, new { @class = profile.EditCSSLabelFor("CompanyName") })
                    @Html.EditorFor(model => model.Shipper.CompanyName, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("CompanyName"), id = "Shipper_CompanyName" } })
                    @* @Html.ValidationMessageFor(model => model.Shipper.CompanyName, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>
                
                <div id="Group_Shipper_Phone" class="@profile.EditCSSFor("Phone")">
                    @Html.LabelFor(model => model.Shipper.Phone, new { @class = profile.EditCSSLabelFor("Phone") })
                    @Html.EditorFor(model => model.Shipper.Phone, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("Phone"), id = "Shipper_Phone" } })
                    @* @Html.ValidationMessageFor(model => model.Shipper.Phone, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>

            </div>);
            data.Add().ID("TabSheet_Shipper_Orders").Text(OrderResources.EntityPlural).ContentTemplate(@<div class="@AppDefaults.CSSClassPanel">    
                <div id="Ajax_Shipper_Orders"></div>
            </div>);
        })
        .Render();
    }
</div>

<script>
    zSyncfusionItem("Item_Shipper");
    
    $(function () {
        try {
            zSyncfusionItemReady("Item_Shipper");

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            if (controllerAction != "create" || profile.IsIdentity) {
                $("#Group_Shipper_ShipperId").hide();
            }

            // Associations (FK)

            // Collections (PK)
            if (controllerAction != "create" && zContains(profile.EditCollections, "Orders")) {
                zUrlDictionaryWrite("Order", "@Context.Request.Url.AbsoluteUri");
                var ajaxUrl = "@(Html.Raw(Url.Action("Search", "Order", new { MasterControllerAction = Model.ControllerAction, MasterEntity = "Shipper", MasterKey = Model.Shipper.ShipperId })))";
                zAjaxLoadSync("Ajax_Shipper_Orders", ajaxUrl);
            }

            zOnItemView(model, profile);        
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });    

    function itemActive_Tab_Shipper(args) {
        zTabDictionaryWrite("Shipper", args.model.selectedItemIndex);

        try {        
            var ejTab = zTab("Tab_Shipper");
            var tabId = ejTab.contentPanels[args.model.selectedItemIndex].id;
            switch (tabId) {
                case "TabSheet_Shipper_Orders":
                    zGridDataSource("Grid_Order", "@Url.Action("DataSource", "Order")");
                    break;
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_Shipper", exception));
        }
    }
</script>
