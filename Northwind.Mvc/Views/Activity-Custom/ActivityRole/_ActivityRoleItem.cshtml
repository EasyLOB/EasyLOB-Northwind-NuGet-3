@model ActivityRoleItemModel

@{
    string CSHTML = "_ActivityRoleItem.cshtml";

    IZProfile profile = DataHelper.GetProfile(typeof(ActivityRole));
    // Associations (FK)
    string activityText = Model.ActivityRole == null ? "" : (Model.ActivityRole.ActivityLookupText ?? "");
    string roleText = Model.ActivityRole.RoleName; // !?!
}

<div id="Item_ActivityRole">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "ActivityRole_Item_ControllerAction" })
    @Html.HiddenFor(model => model.MasterEntity, new { id = "ActivityRole_Item_MasterEntity" })
    @Html.HiddenFor(model => model.MasterKey, new { id = "ActivityRole_Item_MasterKey" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "ActivityRole_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "ActivityRole_Item_IsSave")

    @{Html.EJ().Tab("Tab_ActivityRole")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_ActivityRole")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_ActivityRole_ActivityRole").Text(ActivityRoleResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CSSClassPanel">         
                
                <div id="Group_ActivityRole_ActivityId" class="@profile.EditCSSFor("ActivityId")">
                    @Html.LabelFor(model => model.ActivityRole.ActivityId, new { @class = profile.EditCSSLabelFor("ActivityId") })
                    @Html.EditorFor(model => model.ActivityRole.ActivityId, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("ActivityId"), id = "ActivityRole_ActivityId"  } })
                    @{
                        Html.RenderAction("Lookup", "Activity", new
                        {
                            Text = activityText,
                            ValueId = "ActivityRole_ActivityId",
                            Required = profile.IsRequiredView("ActivityId")
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.ActivityRole.ActivityId, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>

                @* !?! *@
                <div id="Group_ActivityRole_RoleName" class="@AppDefaults.CSSClassGroup col-md-4">
                    @Html.LabelFor(model => model.ActivityRole.RoleName, new { @class = profile.EditCSSLabelFor("RoleName") })
                    @Html.EditorFor(model => model.ActivityRole.RoleName, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("RoleName"), id = "ActivityRole_RoleName" } })
                    @{
                        Html.RenderAction("Lookup", "Role", new
                        {
                            Text = roleText,
                            ValueId = "ActivityRole_RoleName",
                            Required = profile.IsRequiredView("RoleName"),
                            Elements = new List<LookupModelElement>()
                            {
                                new LookupModelElement("ActivityRole_RoleName", "Name")
                            }
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.ActivityRole.RoleName, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>

                <div id="Group_ActivityRole_Operations" class="@profile.EditCSSFor("Operations")">
                    @Html.LabelFor(model => model.ActivityRole.Operations, new { @class = profile.EditCSSLabelFor("Operations") })
                    @Html.EditorFor(model => model.ActivityRole.Operations, new { htmlAttributes = new { @class = profile.EditCSSEditorFor("Operations"), id = "ActivityRole_Operations" } })
                    @* @Html.ValidationMessageFor(model => model.ActivityRole.Operations, "", new { @class = AppDefaults.CSSClassValidator }) *@
                </div>

            </div>);
        })
        .Render();
    }
</div>

<script>
    zSyncfusionItem("Item_ActivityRole");

    $(function () {
        try {
            zSyncfusionItemReady("Item_ActivityRole");

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var profile = @Html.Raw(JsonConvert.SerializeObject(profile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            if (controllerAction != "create" || profile.IsIdentity) {
                $("#Group_ActivityRole_ActivityId").hide();
                $("#Group_ActivityRole_RoleName").hide();
            }

            // Associations (FK)
            switch (model.MasterEntity) {
                case "Activity":
                    $("#ActivityRole_ActivityId").val(model.MasterKey);
                    $("#Group_ActivityRole_ActivityId").hide();
                    break;
                case "Role":
                    $("#ActivityRole_RoleName").val(model.MasterKey);
                    $("#Group_ActivityRole_RoleName").hide();
                    break;
            }

            // Collections (PK)

            zOnItemView(model, profile);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });

    function itemActive_Tab_ActivityRole(args) {
        zTabDictionaryWrite("ActivityRole", args.model.selectedItemIndex);

        try {
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_ActivityRole", exception));
        }
    }
</script>
